<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Algorithm Visualization</title>
        <script type="module" src="https://unpkg.com/ionicons@7.1.0/dist/ionicons/ionicons.esm.js"></script>
    <script nomodule src="https://unpkg.com/ionicons@7.1.0/dist/ionicons/ionicons.js"></script>
    <link rel="shortcut icon" href="favicon-16x16.png" type="image/x-icon">
    <style>
     body {
 font-family: 'Courier New', Courier, monospace;
    margin: 0;
    padding: 0;
    color: black;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
}
header{
    height: 60px;
    position: fixed;
    top: 0;
    width: 100%;
    padding-left: 50px;
    display: flex;
    justify-content: space-between;
    align-items: center;
    z-index: 99;
    background-color:#f6b853;
    border-bottom: 5px solid red;
   
}
.logo{
    justify-content: center;
    font-size: 1.5rem;
    color: black;
    user-select: none;

}
.navigation a{
    position: relative;
    font-size: 1.1em;
    color: black;
    text-decoration: none;
    font-weight: 500;
    margin-right: 60px;
    cursor: pointer;
  
}
.navigation a::after{
    content: '';
    position: absolute;
    bottom: -6px;
    width: 100%;
    height: 3px;
    background:red;
    border-radius: 5px;
    left: 0;
    transform: scaleX(0);
    transition: transform .5s;
    transform-origin: right;
}
.navigation a:hover::after{
    transform-origin: left;
    transform: scaleX(1);
}
#container {
    background-color: #f6b853;
    border: 5px solid red;
    border-radius: 10px;
    text-align: center;
    max-width: 800px;
    width: 100%;
}

h1 {
    font-size: 2rem;
    margin-bottom: 20px;
}

#visualization {
    margin: 20px auto;
    display: flex;
    justify-content: center;
}

#array-container {
    display: flex;
    gap: 10px;
}

.box {
    width: 50px;
    height: 50px;
    display: flex;
    justify-content: center;
    align-items: center;
    border: 2px solid #fff;
    background-color: #444;
    font-size: 1.2rem;
    color: #fff;
    position: relative;
}

.box.highlight {
    background-color: #f39c12;
}

.box.min {
    background-color: #e74c3c;
}

#index-label {
    position: absolute;
    top: -20px;
    font-size: 0.8rem;
}

#info {
    margin: 20px 0;
}

#controls button {
    margin: 10px;
    padding: 10px 20px;
    font-size: 1rem;
    background-color: red;
    color: #fff;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s;
}

#controls button:hover {
    background-color: #e67e22;
}
.about-selection{
    font-family: Roboto,arial,sans-serif;
    display: none;
    height: 52vh;
    width: 55vw;
    max-width: 90%;
    border: 5px solid red;
    border-radius: 8px;
    transition: max-height 0.5s ease-out;
    overflow: hidden;
    box-shadow: 0px 0px 30px  #f6b853;
    position: relative; 
    text-align: center;
    background-color: #f6b853;
    color: white;
}

.about-selection h3,
.about-selection h2 {
    color: black;
    text-align: center;
    padding-top: 5px;
 
}
.about-selection h3{
        font-size: 1.4rem;
}
.about-selection p1{
    font-size: 1.1rem;
   margin-top: -10px;
}
.about-selection p2,
.about-selection p3
 {
    
    text-align: center;
}
#icon-close-about {
    color: white;
    position: absolute;
    top: 10px; 
    right: 10px; 
    width: 35px; 
    height: 35px;
    background: red;
    font-size: 2em; 
    display: flex;
    justify-content: center;
    align-items: center;
    border-radius: 50%; 
    cursor: pointer;
    z-index: 1;
}

@media (max-width: 768px) {
    #icon-close-about{
        top: 5px;   
        right: 5px;
        width: 30px; 
        height: 30px;
        font-size: 1.5em; 
    }
}

    #icon-close-about{
        top: -10px; 
        right: -10px;
        width: 35px;
        height: 35px;
        font-size: 2em;
    }
    .selection-code{
        display: none;
         margin-top: 40px;
         background-color: black;    
         height: 55vh;
         width:35vw;
         max-width: 90%;
         border: 5px solid white;
         border-radius: 5px;
         transition: max-height 0.5s ease-out;
         overflow: hidden;
         box-shadow: 0 0 30px black;
         position: relative; 
     
     }
     .selection-code p1{
         color: white;
         padding-left: -10px;
     }
     .selection-code h1{
         color: white;
         font-size: 1rem;
         padding-top: 15px;
         text-align: center;
         border-bottom: 2px solid white;
     }
     .selection-code #icon-close-code{
         background: black;
     }
     #icon-close-code{
         color: white;
         position: absolute;
         top: 10px; 
         right: 10px; 
         width: 35px; 
         height: 35px;
         background: black;
         font-size: 2em; 
         display: flex;
         justify-content: center;
         align-items: center;
         border-radius: 50%; 
         cursor: pointer;
         z-index: 1;
     }
     
     @media (max-width: 768px) {
         #icon-close-code {
             top: 5px;   
             right: 5px;
             width: 30px; 
             height: 30px;
             font-size: 1.5em; 
         }
     }
     
         #icon-close-code{
             top: -10px; 
             right: -10px;
             width: 35px;
             height: 35px;
             font-size: 2em;
         }
    </style>
</head>
<body action="/SelectionSort" method="post">
    <header>
        <h2 class="logo">Algorithm Visualizer</h2>
        <nav class="navigation">
            <a id="selection-btn">About SelectionSort</a>
            <a  id="code">Code</a>
        </nav>
    </header>
    <div id="container">
        <h1>Selection Sort Visualization</h1>
        <div id="visualization">
            <div id="array-container"></div>
        </div>
        <div id="info">
            <p id="instructions">Click "Start Visualizing" to begin the selection sort process.</p>
            <p>Comparisons: <span id="comparisons">0</span></p>
            <p>Swaps: <span id="swaps">0</span></p>
            <p>Time Complexity: O(nÂ²)</p>
            <p>Space Complexity: O(1)</p>
        </div>

        <div id="controls">
            <button id="input-array">Input Array</button>
            <button id="start-visualizing">Start Sorting</button>
        </div>
    </div>
    <div class="about-selection">
        <span id="icon-close-about"><ion-icon name="close-circle-outline"></ion-icon></span>
            <h3>Basic Information of Selection Sort</h3>
            <p1> Selection sort works by repeatedly selecting the smallest (or largest, depending on sorting order) element from the unsorted portion of the list and swapping it with the first unsorted element..</p1>
    
            <h2>Steps:</h2>
            <p2>1. Start with the first element of the array as the current position.<br><br>
               2. Find the smallest element in the remaining unsorted portion of the array.<br><br>
               3. Swap this smallest element with the element at the current position.<br><br>
               4. Move the current position one step forward and repeat the process until the array is sorted.
            </p2>                
        </div>

        <div class="selection-code">
            <span id="icon-close-code" ><ion-icon name="close-circle-outline"></ion-icon></span>
           <h1>Algorithm of Selection Sort:</h1>
       <p1><pre><code>
    
        SelectionSort(A):
        n = length of A  // Get the size of the array
        for i = 0 to n-1 do:
            minIndex = i
            // Find the smallest element in the unsorted part of the array
            for j = i+1 to n-1 do:
                if A[j] < A[minIndex] then:
                    minIndex = j
            // Swap the found minimum element with the element at index i
            if minIndex != i then:
                swap A[i] with A[minIndex]
    
       </code></pre></p1>
</body>
</html>
<script>
const arrayContainer = document.getElementById("array-container");
const instructions = document.getElementById("instructions");
const comparisonsText = document.getElementById("comparisons");
const swapsText = document.getElementById("swaps");

let array = [34, 12, 45, 23, 5, 29]; 
let comparisons = 0;
let swaps = 0;


function renderArray(highlightIndex = -1, minIndex = -1) {
    arrayContainer.innerHTML = ""; 
    array.forEach((value, index) => {
        const box = document.createElement("div");
        box.classList.add("box");
        box.innerHTML = `<div>${value}</div>`;
        if (index === highlightIndex) box.classList.add("highlight");
        if (index === minIndex) box.classList.add("min");

        const indexLabel = document.createElement("div");
        indexLabel.id = "index-label";
        indexLabel.innerText = index;
        box.appendChild(indexLabel);

        arrayContainer.appendChild(box);
    });
}


document.getElementById("input-array").addEventListener("click", () => {
    const input = prompt("Enter 6 array elements separated by commas:");
    if (input) {
        array = input.split(",").map(Number);
        comparisons = 0;
        swaps = 0;
        updateStats();
        renderArray();
        instructions.textContent = "Array updated! Click 'Start Visualizing' to begin.";
    }
});


document.getElementById("start-visualizing").addEventListener("click", async () => {
    instructions.textContent = "Visualization in progress...";
    await selectionSortVisualization();
    instructions.textContent = "Sorting complete! The array is now sorted.";
});


function updateStats() {
    comparisonsText.textContent = comparisons;
    swapsText.textContent = swaps;
}


async function selectionSortVisualization() {
    for (let i = 0; i < array.length - 1; i++) {
        let minIndex = i;
        renderArray(i, minIndex);
        instructions.textContent = `Step ${i + 1}: Finding the smallest element in the unsorted portion of the array.`;
        await sleep(1000);

        for (let j = i + 1; j < array.length; j++) {
            comparisons++;
            updateStats();
            renderArray(i, minIndex);
            instructions.textContent = `Comparing array[${j}] (${array[j]}) with the current minimum (${array[minIndex]}).`;
            await sleep(1000);

            if (array[j] < array[minIndex]) {
                minIndex = j;
                renderArray(i, minIndex);
                instructions.textContent = `New minimum found: array[${j}] (${array[j]}).`;
                await sleep(1000);
            }
        }

        if (minIndex !== i) {
            [array[i], array[minIndex]] = [array[minIndex], array[i]];
            swaps++;
            updateStats();
            renderArray(i, minIndex);
            instructions.textContent = `Swapping array[${i}] (${array[i]}) with array[${minIndex}] (${array[minIndex]}).`;
            await sleep(1000);
        }
    }
    renderArray(); 
}


function sleep(ms) {
    return new Promise((resolve) => setTimeout(resolve, ms));
}

renderArray();

const selectionbtn=document.getElementById('selection-btn');
const abtselection=document.querySelector('.about-selection');
const container =document.getElementById('container');
const closeabt=document.getElementById('icon-close-about');
const code=document.getElementById('code');
const selectioncode=document.querySelector('.selection-code')
const closecode=document.getElementById('icon-close-code')

selectionbtn.addEventListener('click',()=>{
    abtselection.style.display='block';
    container.style.display='none';
})

closeabt.addEventListener('click',()=>{
    abtselection.style.display='none';
    container.style.display='block';
})

code.addEventListener('click',()=>{
    selectioncode.style.display='block';
    container.style.display='none';
    abtselection.style.display='none';
})

closecode.addEventListener('click',()=>{
    selectioncode.style.display='none';
    container.style.display='block';
})

</script>