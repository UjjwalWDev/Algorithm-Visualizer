<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Algorithm Visualization</title>
        <script type="module" src="https://unpkg.com/ionicons@7.1.0/dist/ionicons/ionicons.esm.js"></script>
    <script nomodule src="https://unpkg.com/ionicons@7.1.0/dist/ionicons/ionicons.js"></script>
    <link rel="shortcut icon" href="favicon-16x16.png" type="image/x-icon">
</head>

<body action="/Linked-list" method="post">
        <header>
            <h1 class="logo">Algorithm Visualizer</h1>
            <nav class="navigation">
                <a id="link-btn">About Linked-list</a>
                <a  id="code">Code</a>
            </nav>
        </header>
    <div class="container">
    <h1>Linked List Sorting Visualizer</h1>
    <p id="instructions">Click "Sort" to start sorting the linked list.</p>
    <div id="linked-list-container"></div>
    <button id="input-btn" onclick="getUserInput()">Enter Linked List</button>
    <button id="sort-btn" onclick="sortLinkedList()">Sort Linked List</button>

    <div id="complexity-info">
        <p><strong>Time Complexity:</strong> O(n²)</p>
        <p><strong>Space Complexity:</strong> O(1)</p>
    </div>
</div>

 <div class="about-link">
        <span id="icon-close-about"><ion-icon name="close-circle-outline"></ion-icon></span>
            <h1>Basic Information of Linked-list</h1>
            <p1>A linked list is a fundamental data structure in computer science used to store a collection of elements, called nodes. Each node contains two main components:<br>
            1.Data: The value or information that the node holds.<br>
            2.Pointer (or Reference): A link to the next node in the sequence.</p1>
            <h2>Types of Linked Lists:</h2>
            <p2>1.Singly Linked List: Each node points to the next node in the sequence. The last node points to null, indicating the end of the list.<br>
            <br>
            2. Doubly Linked List: Each node has two pointers: one pointing to the next node and another pointing to the previous node. This allows traversal in both directions.<br>
            <br>
            3.Circular Linked List: The last node points back to the first node, forming a circle. This can be either singly or doubly linked.<br>
            <br>
            4. Circular Doubly Linked List: Combines both circular and doubly linked lists; it allows traversal in both directions in a circular manner.<br>
            </p2>
        </div>



<div class="link-code">
         <span id="icon-close-code" ><ion-icon name="close-circle-outline"></ion-icon></span>
        <h1>Code in 'C' for Inserting,Deleting,Traversing of Linked-list nodes:</h1>
    <p1><pre><code>
 #include &lt;stdio.h&gt;
 #include &lt;stdlib.h&gt;

 // Define the structure for a node in the linked list
 struct Node {
 int data;// Data part
 struct Node* next;// Pointer to the next node
 };

 // Function to create a new node with given data
 struct Node* createNode(int data) {
 struct Node* newNode = (struct Node*)malloc(sizeof(struct Node)); 
 newNode->data = data; // Assign data to the new node
 newNode->next = NULL; // Initialize the next pointer to NULL
 return newNode; // Return the newly created node
 }

 // Function to insert a new node at the end of the linked list
 void insertAtEnd(struct Node** head_ref, int data) {
 struct Node* newNode = createNode(data);
 if (*head_ref == NULL) {  // If the list is empty
 *head_ref = newNode; // Make the new node the head
 return;
 }
 struct Node* lastNode = *head_ref;
 while (lastNode->next != NULL) {  // Traverse to the last node
 lastNode = lastNode->next;
 }
 lastNode->next = newNode;  // Link the last node to the new node
 }

 // Function to delete a node with a specific key from the linked list
 void deleteNode(struct Node** head_ref, int key) {
 struct Node* currentNode = *head_ref;
 struct Node* previousNode = NULL;

 // If the head node holds the key to be deleted
 if (currentNode != NULL && currentNode->data == key) {
 *head_ref = currentNode->next; // Change head
 free(currentNode); // Free the old head
 return;
 }

 // Search for the key to be deleted, keeping track of the previous node
 while (currentNode != NULL && currentNode->data != key) {
 previousNode = currentNode;
 currentNode = currentNode->next;
 }

 // If the key was not found
 if (currentNode == NULL) {
 printf("Node with data %d not found.\n", key);
 return;
 }

 // Unlink the node from the linked list
 previousNode->next = currentNode->next;
 free(currentNode); // Free the memory of the deleted node
        }

 // Function to traverse and print the linked list
 void traverse(struct Node* node) {
 while (node != NULL) {
 printf("%d -> ", node->data);
 node = node->next;
 }
 printf("NULL\n"); // Indicate the end of the list
 }

 // Main function to demonstrate linked list operations
 int main() {
 struct Node* head = NULL; // Initialize the head of the list

 // Insert nodes into the linked list
 insertAtEnd(&head, 10);
 insertAtEnd(&head, 20);
 insertAtEnd(&head, 30);

 printf("Linked List after insertion:\n");
 traverse(head); // Display the linked list

 // Delete a node from the linked list
 deleteNode(&head, 20);
 printf("Linked List after deletion of 20:\n");
 traverse(head); // Display the linked list after deletion

 // Attempt to delete a node that doesn't exist
 deleteNode(&head, 40); // Node not found

 return 0; // Exit the program
        }

    </code></pre></p1>
</div>
</body>
</html>

<script>

    let linkedList = [22, 2, 77, 6, 43, 76, 89]; 
let swapCount = 0;
let instructionText = document.getElementById('instructions');

function createLinkedList() {
    const container = document.getElementById('linked-list-container');
    container.innerHTML = ''; 

    linkedList.forEach((value, index) => {
        const node = document.createElement('div');
        node.classList.add('node');

        const nodeValue = document.createElement('div');
        nodeValue.classList.add('node-value');
        nodeValue.innerText = value;
        node.appendChild(nodeValue);

        if (index === 0) {
            const headLabel = document.createElement('div');
            headLabel.classList.add('node-label');
            headLabel.innerText = `head/0`;
            node.appendChild(headLabel);
        } else if (index === linkedList.length - 1) {
            const tailLabel = document.createElement('div');
            tailLabel.classList.add('node-label');
            tailLabel.innerText = `tail/${index}`;
            node.appendChild(tailLabel);
        }

        if (index < linkedList.length - 1) {
            const arrow = document.createElement('div');
            arrow.classList.add('node-arrow');
            node.appendChild(arrow);
        }

        container.appendChild(node);
    });
}


function getUserInput() {
    const userInput = prompt("Enter the linked list values separated by commas (e.g. 22,2,77,6,43,76,89):");
    
    if (userInput) {
        linkedList = userInput.split(',').map(Number).filter(val => !isNaN(val));
        createLinkedList();
        instructionText.innerText = "Click 'Sort' to sort your linked list.";
    } else {
        alert("Invalid input. Please enter numbers separated by commas.");
    }
}

function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

async function sortLinkedList() {
    let len = linkedList.length;
    let swapped;
    instructionText.innerText = "Starting  Sorting...";

    for (let i = 0; i < len - 1; i++) {
        swapped = false;
        
        for (let j = 0; j < len - i - 1; j++) {
            const nodes = document.getElementsByClassName('node-value');
            nodes[j].classList.add('swapping');
            nodes[j + 1].classList.add('swapping');
            instructionText.innerText = `Comparing nodes: ${linkedList[j]} and ${linkedList[j + 1]}`;
            
            await sleep(1500); 
            
            if (linkedList[j] > linkedList[j + 1]) {
                let temp = linkedList[j];
                linkedList[j] = linkedList[j + 1];
                linkedList[j + 1] = temp;
                swapCount++;
                
        
                createLinkedList();
                swapped = true;
            }

            nodes[j].classList.remove('swapping');
            nodes[j + 1].classList.remove('swapping');
            await sleep(1000);
        }

        if (!swapped) {
            break;
        }
    }

    instructionText.innerText = "Sorting Complete!";
    
 
    const nodes = document.getElementsByClassName('node-value');
    for (let i = 0; i < nodes.length; i++) {
        nodes[i].classList.add('sorted');
    }

    showComplexity();
}


function showComplexity() {
    instructionText.innerHTML = `Sorting finished in ${swapCount} swaps. <br> Time Complexity: O(n²), Space Complexity: O(1).`;
}


createLinkedList();


    const aboutLinkBtn = document.getElementById('link-btn');
    const aboutLinkSection = document.querySelector('.about-link');
    const otherContent = document.querySelector('.container');
    const closeButton = document.getElementById('icon-close-about');
    const arrcode=document.querySelector('.link-code')
    const codebtn=document.getElementById('code')
    const codeCloseButton = document.getElementById('icon-close-code');


    aboutLinkBtn.addEventListener('click', () => {
        aboutLinkSection.style.display = 'block'; 
        otherContent.style.display = 'none';  
    });

   
    closeButton.addEventListener('click', () => {
        aboutLinkSection.style.display = 'none';  
        otherContent.style.display = 'block';   
    });
     
    codebtn.addEventListener('click', () => {
        arrcode.style.display = 'block'; 
        otherContent.style.display = 'none';  
    });


    codeCloseButton.addEventListener('click', () => {
        arrcode.style.display = 'none';  
        otherContent.style.display = 'block';   
    });

</script>

<style>

    * {
    box-sizing: border-box; 
}

body {
   font-family: 'Courier New', Courier, monospace;
    background-color: #f4f4f4;
    margin: 0;
    padding: 0;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
}
header{
    position: fixed;
    top: 0;
    width: 100%;
    padding-left: 50px;
    display: flex;
    justify-content: space-between;
    align-items: center;
    z-index: 99;
    background-color:green;
}
.logo{
    font-size: 1.5rem;
    color: white;
    user-select: none;

}
.navigation a{
    position: relative;
    font-size: 1.1em;
    color: white;
    text-decoration: none;
    font-weight: 500;
    margin-left: 40px;
    cursor: pointer;
  
}
#code{
    margin-right: 70px;
}
.navigation a::after{
    content: '';
    position: absolute;
    bottom: -6px;
    width: 100%;
    height: 3px;
    background:white;
    border-radius: 5px;
    left: 0;
    transform: scaleX(0);
    transition: transform .5s;
    transform-origin: right;
}
.navigation a:hover::after{
    transform-origin: left;
    transform: scaleX(1);
}

.container {
    text-align: center;
    border: 5px solid green;
    box-shadow: 0 0  30px green;
    padding-left: 40px;
    padding-right: 40px;
    padding-top: 40px;
    padding-bottom: 40px;
    border-radius: 10px;
}

h1 {
    margin-top: 20px;
    color:green;
}

#instructions {
    font-size: 18px;
    color: red;
    margin-bottom: 20px;
}

#linked-list-container {
    display: flex;
    justify-content: center;
    align-items: center;
    margin: 20px auto;
    position: relative;
}

.node {
    display: flex;
    flex-direction: column;
    align-items: center;
    margin: 0 20px;
    position: relative;
}

.node-value {
    width: 50px;
    height: 50px;
    border: 3px solid #555;
    border-radius: 50%;
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: 18px;
    font-weight: bold;
    background-color: white;
    transition: background-color 0.5s ease;
}

.node-value.swapping {
    background-color: #ffdd57;
}

.node-value.sorted {
    background-color: red;
}

.node-arrow {
    width: 60px;
    height: 2px;
    background-color: black;
    position: absolute;
    top: 25px;
    left: 50px;
    z-index: -1;
}

.node-arrow:first-child {
    display: none; 
}

.node-label {
    font-size: 14px;
    margin-top: 5px;
    color: red;
}
#input-btn{
    margin-top: 30px;
    padding: 10px 20px;
    font-size: 16px;
    background-color: #28a745;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s ease;
       border: 2px solid black;

}
#input-btn:hover{
    background-color: white;
    color: green;
    border: 2px solid green;
}
#sort-btn {
    margin-top: 30px;
    padding: 10px 20px;
    font-size: 16px;
    background-color: #28a745;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s ease;
     border: 2px solid black;
}

#sort-btn:hover {
    background-color: white;
    color: green;
    border: 2px solid green;

}

#complexity-info {
    margin-top: 40px;
    font-size: 16px;
}

#complexity-info p {
    margin: 5px 0;
    color: #555;
}
.about-link{
       font-family: Roboto,arial,sans-serif;
   display: none;
    background-color: whitesmoke;    
    height: 63vh;
    width: 55vw;
    max-width: 90%;
    border: 5px solid green;
    border-radius: 8px;
    transition: max-height 0.5s ease-out;
    overflow: hidden;
    box-shadow: 0 0 30px green;
    position: relative; 
    text-align: center;
}

.about-link h1,
.about-link h2 {
    color: green;
    text-align: center;
    padding-top: 10px;
    padding-bottom: 10px;
}

.about-link p1{
    font-size: 1.1rem;
}
.about-link p2 {
    
    text-align: center;
}
#icon-close-about {
    color: white;
    position: absolute;
    top: 10px; 
    right: 10px; 
    width: 35px; 
    height: 35px;
    background: green;
    font-size: 2em; 
    display: flex;
    justify-content: center;
    align-items: center;
    border-radius: 50%; 
    cursor: pointer;
    z-index: 1;
}

@media (max-width: 768px) {
    #icon-close-about{
        top: 5px;   
        right: 5px;
        width: 30px; 
        height: 30px;
        font-size: 1.5em; 
    }
}

    #icon-close-about{
        top: -10px; 
        right: -10px;
        width: 35px;
        height: 35px;
        font-size: 2em;
    }

    .link-code{
   display: none;
    margin-top: 40px;
    background-color: black;    
    height: 85vh;
    width:35vw;
    max-width: 90%;
    border: 5px solid white;
    border-radius: 5px;
    transition: max-height 0.5s ease-out;
    overflow: hidden;
    box-shadow: 0 0 30px black;
    position: relative; 
    overflow-y: auto;

}
.link-code p1{
    color: white;
    padding-left: -10px;
}
.link-code h1{
    color: white;
    font-size: 1rem;
    padding-top: 15px;
    text-align: center;
    border-bottom: 2px solid white;
}
.link-code #icon-close-code{
    background: black;
}
#icon-close-code{
    color: white;
    position: absolute;
    top: 10px; 
    right: 10px; 
    width: 35px; 
    height: 35px;
    background: black;
    font-size: 2em; 
    display: flex;
    justify-content: center;
    align-items: center;
    border-radius: 50%; 
    cursor: pointer;
    z-index: 1;
}

@media (max-width: 768px) {
    #icon-close-code {
        top: 5px;   
        right: 5px;
        width: 30px; 
        height: 30px;
        font-size: 1.5em; 
    }
}

    #icon-close-code{
        top: -10px; 
        right: -10px;
        width: 35px;
        height: 35px;
        font-size: 2em;
    }

</style>