<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Algorithm Visualization</title>
        <script type="module" src="https://unpkg.com/ionicons@7.1.0/dist/ionicons/ionicons.esm.js"></script>
    <script nomodule src="https://unpkg.com/ionicons@7.1.0/dist/ionicons/ionicons.js"></script>
    <link rel="shortcut icon" href="favicon-16x16.png" type="image/x-icon">
</head>
<body action="/LinearSearch" method="post">
    <header>
        <h2 class="logo">Algorithm Visualizer</h2>
        <nav class="navigation">
            <a id="Linear-btn">About LinearSearch</a>
            <a  id="code">Code</a>
        </nav>
    </header>
    <div class="cont">
    <div id="container">
        <h1>Linear Search Visualization</h1>
        <div id="array-container">
        </div>
        <div id="info">
            <p>Target: <span id="target-value"></span></p>
            <p id="comparison-text">Waiting for input...</p>
            <p>Total Comparisons: <span id="comparison-count">0</span></p>
            <p>Time Complexity: O(n)</p>
            <p>Space Complexity: O(1)</p>
        </div>
        <button id="input-array-button">Input Array & Target</button>
        <button id="start-button" disabled>Start Search</button>
    </div>
</div>
     <div class="about-linear">
        <span id="icon-close-about"><ion-icon name="close-circle-outline"></ion-icon></span>
            <h3>Basic Information of Linear Search</h3>
            <p1>Linear search is a straightforward search algorithm that checks each element in a list one by one to find a target value. It’s called “linear” because it follows a linear path through the list from start to finish.</p1>

            <h2>How Linear Search Works:</h2>
            <p2>1.Start at the first element of the array.<br>
            <br>
            2. Compare the current element to the target value.<br>
            <br>
            3.If the current element matches the target value, the search is successful, and the index of the element is returned.<br>
            <br>
            4. If it doesn’t match, move to the next element.<br>
            <br>
            5.Repeat steps 2–4 until:
                a)The target value is found (success).
                b)The end of the list is reached (failure if the target wasn’t found).
            </p2>
        </div>
<div class="linear-code">
         <span id="icon-close-code" ><ion-icon name="close-circle-outline"></ion-icon></span>
        <h1>Code in 'C' to Implement Linear Search:</h1>
    <p1><pre><code>
#include &lt;stdio.h&gt;

int linearSearch(int array[], int size, int target) {
    for (int i = 0; i < size; i++) {
        if (array[i] == target) {
            return i;  // Return the index if the target is found
        }
    }
    return -1;  // Return -1 if the target is not found
}

int main() {
    int size, target, result;

    // Input the size of the array
    printf("Enter the number of elements in the array: ");
    scanf("%d", &size);

    int array[size];

    // Input the elements of the array
    printf("Enter the elements of the array:\n");
    for (int i = 0; i < size; i++) {
        scanf("%d", &array[i]);
    }

    // Input the target value to search for
    printf("Enter the target value to search for: ");
    scanf("%d", &target);

    // Perform linear search
    result = linearSearch(array, size, target);

    // Output the result
    if (result != -1) {
        printf("Target found at index %d\n", result);
    } else {
        printf("Target not found in the array\n");
    }

    return 0;
}

    </code></pre></p1>
</div>
</body>
</html>
<script>
    let array = [];
let target; 
let currentIndex = 0;
let comparisonCount = 0;
let isDynamicVisualization = true;

const arrayContainer = document.getElementById('array-container');
const targetValueElement = document.getElementById('target-value');
const comparisonText = document.getElementById('comparison-text');
const comparisonCountElement = document.getElementById('comparison-count');
const startButton = document.getElementById('start-button');
const inputArrayButton = document.getElementById('input-array-button');


const predefinedArray = [3, 8, 15, 19, 25, 30, 42];
const predefinedTarget = 19; 


function displayArray() {
    arrayContainer.innerHTML = '';
    array.forEach((value, index) => {
        const element = document.createElement('div');
        element.classList.add('array-element');
        element.textContent = value;

        const indexLabel = document.createElement('div');
        indexLabel.classList.add('index-label');
        indexLabel.textContent = index;

        element.appendChild(indexLabel);
        element.id = `element-${index}`;
        arrayContainer.appendChild(element);
    });
}


function linearSearchStep() {
    if (currentIndex < array.length) {
        comparisonCount++;
        comparisonCountElement.textContent = comparisonCount;


        const currentElement = document.getElementById(`element-${currentIndex}`);
        currentElement.classList.add('highlight');

        if (array[currentIndex] === target) {
            comparisonText.textContent = `Index ${currentIndex}: ${array[currentIndex]} == ${target}, Found!`;
            currentElement.classList.add('target');
            startButton.disabled = false; 
        } else {
            comparisonText.textContent = `Index ${currentIndex}: ${array[currentIndex]} != ${target}, Continue...`;

            setTimeout(() => {
                currentElement.classList.remove('highlight');
                currentIndex++;
                linearSearchStep(); 
            }, 1000);
        }
    } else {
        comparisonText.textContent = 'Element not found!';
        startButton.disabled = false; 
    }
}

startButton.addEventListener('click', () => {
    startButton.disabled = true; 
    currentIndex = 0;
    comparisonCount = 0;
    comparisonCountElement.textContent = comparisonCount;
    comparisonText.textContent = 'Starting search...';
    document.querySelectorAll('.array-element').forEach(element => {
        element.classList.remove('highlight', 'target');
    });
    linearSearchStep();
});


inputArrayButton.addEventListener('click', () => {
    isDynamicVisualization = false; 
    const userArrayInput = prompt('Enter an array of numbers (comma-separated):');
    if (userArrayInput !== null) {
        array = userArrayInput.split(',').map(Number); 
        displayArray(); 

        const userTargetInput = prompt('Enter the target value to search for:');
        if (userTargetInput !== null) {
            target = parseInt(userTargetInput);
            targetValueElement.textContent = target;
            comparisonText.textContent = 'Ready to start search...';
            startButton.disabled = false; 
        }
    }
});

window.onload = () => {
    array = predefinedArray.slice(); 
    target = predefinedTarget; 
    displayArray();
    targetValueElement.textContent = target;
    comparisonText.textContent = 'Click "Start Search" to begin...';
    startButton.disabled = false; 
};

const Linearbtn = document.getElementById('Linear-btn')
const abtlinear=document.querySelector('.about-linear')
const otherContent = document.querySelector('.cont');
const closeButton = document.getElementById('icon-close-about');
const linearcode=document.querySelector('.linear-code')
const codebtn=document.getElementById('code')
const codeCloseButton = document.getElementById('icon-close-code');

Linearbtn.addEventListener('click', () => {
        abtlinear.style.display = 'block'; 
        otherContent.style.display = 'none';  
    });

    closeButton.addEventListener('click', () => {
        abtlinear.style.display = 'none';  
        otherContent.style.display = 'block';   
    });
     
    codebtn.addEventListener('click', () => {
        linearcode.style.display = 'block'; 
        otherContent.style.display = 'none';  
    });


    codeCloseButton.addEventListener('click', () => {
        linearcode.style.display = 'none';  
        otherContent.style.display = 'block';   
    });



</script>
<style>
    body {
   font-family: 'Courier New', Courier, monospace;
    background-color: #fff;
    color: #000;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    margin: 0;
}

#container {
    border: 9px solid black;
    text-align: center;
    background-color: #111;
    color: #fff;
    padding: 20px;
    border-radius: 10px;
    width: 80%;
    box-shadow: 0 0 30px black;
}

#array-container {
    display: flex;
    justify-content: center;
    margin-top: 20px;
    position: relative;
}

.array-element {
    display: inline-block;
    margin: 5px;
    padding: 20px;
    border: 2px solid #fff;
    width: 50px;
    text-align: center;
    font-size: 20px;
    transition: background-color 0.3s;
    position: relative;
}

.index-label {
    position: absolute;
    top: -20px;
    width: 100%;
    text-align: center;
    font-size: 14px;
    color: #fff;
}

#info {
    margin-top: 20px;
}

#start-button, #input-array-button {
    margin-top: 20px;
    padding: 10px 20px;
    font-size: 16px;
    cursor: pointer;
}

.highlight {
    background-color: yellow;
    color: black;
}

.target {
    border-color: yellow;
}
h1{
    margin-bottom: 60px;
}
#input-array-button{
  background-color: black;
  color: white;
  border: 5px solid white;
  border-radius: 25px;
}
#start-button{
    background-color: black;
    color: white;
    border: 5px solid white;
    border-radius: 25px;
    margin-left: 15px;
}
#input-array-button:hover{
    background-color: white;
    color: black;
    border-radius: 22px;
    border: 5px solid black;
}
#start-button:hover{
    background-color: white;
    color: black;
    border-radius: 22px;
    border: 5px solid black;   
}
header{
    height: 60px;
    position: fixed;
    top: 0;
    width: 100%;
    padding-left: 50px;
    display: flex;
    justify-content: space-between;
    align-items: center;
    z-index: 99;
    background-color:black;
   
}
.logo{
    justify-content: center;
    font-size: 1.5rem;
    color: white;
    user-select: none;

}
.navigation a{
    position: relative;
    font-size: 1.1em;
    color: white;
    text-decoration: none;
    font-weight: 500;
    margin-left: 40px;
    cursor: pointer;
  
}
#code{
    margin-right: 70px;
}
.navigation a::after{
    content: '';
    position: absolute;
    bottom: -6px;
    width: 100%;
    height: 3px;
    background:white;
    border-radius: 5px;
    left: 0;
    transform: scaleX(0);
    transition: transform .5s;
    transform-origin: right;
}
.navigation a:hover::after{
    transform-origin: left;
    transform: scaleX(1);
}

.about-linear{
    font-family: Roboto,arial,sans-serif;
    display: none;
    background-color: whitesmoke;    
    height: 52vh;
    width: 55vw;
    max-width: 90%;
    border: 5px solid black;
    border-radius: 8px;
    transition: max-height 0.5s ease-out;
    overflow: hidden;
    box-shadow: 0 0 30px black;
    position: relative; 
    text-align: center;
}

.about-linear h3,
.about-linear h2 {
    color: black;
    text-align: center;
    padding-top: 5px;
 
}
.about-linear h3{
        font-size: 1.4rem;
}
.about-linear p1{
    font-size: 1.1rem;
   margin-top: -10px;
}
.about-linear p2 {
    
    text-align: center;
}
#icon-close-about {
    color: white;
    position: absolute;
    top: 10px; 
    right: 10px; 
    width: 35px; 
    height: 35px;
    background: black;
    font-size: 2em; 
    display: flex;
    justify-content: center;
    align-items: center;
    border-radius: 50%; 
    cursor: pointer;
    z-index: 1;
}

@media (max-width: 768px) {
    #icon-close-about{
        top: 5px;   
        right: 5px;
        width: 30px; 
        height: 30px;
        font-size: 1.5em; 
    }
}

    #icon-close-about{
        top: -10px; 
        right: -10px;
        width: 35px;
        height: 35px;
        font-size: 2em;
    }

    .linear-code{
   display: none;
    margin-top: 40px;
    background-color: black;    
    height: 85vh;
    width:35vw;
    max-width: 90%;
    border: 5px solid white;
    border-radius: 5px;
    transition: max-height 0.5s ease-out;
    overflow: hidden;
    box-shadow: 0 0 30px black;
    position: relative; 
    overflow-y: auto;
    scrollbar-width: none;
   

}
.linear-code p1{
    color: white;
    padding-left: -10px;
}
.linear-code h1{
    color: white;
    font-size: 1rem;
    padding-top: 15px;
    text-align: center;
    border-bottom: 2px solid white;
}
.linear-code #icon-close-code{
    background: black;
}
#icon-close-code{
    color: white;
    position: absolute;
    top: 10px; 
    right: 10px; 
    width: 35px; 
    height: 35px;
    background: black;
    font-size: 2em; 
    display: flex;
    justify-content: center;
    align-items: center;
    border-radius: 50%; 
    cursor: pointer;
    z-index: 1;
}

@media (max-width: 768px) {
    #icon-close-code {
        top: 5px;   
        right: 5px;
        width: 30px; 
        height: 30px;
        font-size: 1.5em; 
    }
}

    #icon-close-code{
        top: -10px; 
        right: -10px;
        width: 35px;
        height: 35px;
        font-size: 2em;
    }
</style>